import java.util.regex.Pattern

apply plugin: 'java'
apply plugin: 'scala'
apply plugin: 'application'

//code style
//apply plugin: 'checkstyle'
//apply plugin: 'findbugs'
//apply plugin: "sonar"

version = '1.0'
sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

//this works to avoid problems with mixed projects
sourceSets.main.scala.srcDir "src/main/java"
sourceSets.main.java.srcDirs = [] 
mainClassName = "cova2.Main"

sourceSets {
    integTest {
        java.srcDir file('src/integTest/java')
        resources.srcDir file('src/integTest/resources')
    }
    cucumberTest {
        java.srcDir file('src/cucumberTest/java')
        resources.srcDir file('src/cucumberTest/resources')
    } 
}

task integTest(type: Test) {
    testClassesDir = sourceSets.integTest.output.classesDir
    classpath = sourceSets.integTest.runtimeClasspath
}

task cucumberTest(type: Test) {
    testClassesDir = sourceSets.cucumberTest.output.classesDir
    classpath = sourceSets.cucumberTest.runtimeClasspath
}


sourceSets.test.scala.srcDir "src/test/java"
sourceSets.test.java.srcDirs = []

check.dependsOn integTest
check.dependsOn cucumberTest

if (!hasProperty('mainClass')) {
    ext.mainClass = 'Main'
}  

repositories {
    mavenCentral()
}

dependencies {
    //h2 relational database
    //compile 'com.h2database:h2:1.4.181'
    compile fileTree('libs')
    //scala
    compile 'org.scala-lang:scala-library:2.11.2' 
    //JFreeChart
    //compile 'org.jfree:jfreechart:1.0.19' 
    //JSON4S jackson
    compile 'org.json4s:json4s-jackson_2.11:3.2.11'
    //junit unitary test library
    testCompile group: 'junit', name: 'junit', version: '4.11'
    //cuncuber dependences
    testCompile 'info.cukes:cucumber-jvm:1.2.2',
        'info.cukes:cucumber-java:1.2.2',
        'info.cukes:cucumber-junit:1.2.2' 
    testCompile 'info.cukes:cucumber-jvm-deps:1.0.3'
    //tests
    integTestCompile sourceSets.main.output
    integTestCompile configurations.testCompile
    integTestCompile sourceSets.test.output
    integTestRuntime configurations.testRuntime
    cucumberTestCompile sourceSets.main.output
    cucumberTestCompile configurations.testCompile
    cucumberTestCompile sourceSets.test.output
    cucumberTestRuntime configurations.testRuntime
    
}
test {
    testLogging {
        // Show that tests are run in the command-line output
        events 'started', 'passed'
    }
}

//Gradle Wrapper
task wrapper(type: Wrapper) {
    gradleVersion = '2.2'
}

//sonar {
//    database {
//        url = "org.h2.Driver"
//        driverClassName = "jdbc:h2:./data/db/index"
//        username = "cova2"
//        password = ""
//   }
//    project {
//        coberturaReportPath = file("$buildDir/cobertura.xml")
//   }
//} 
//
//tasks.withType(ScalaCompile) {
//    scalaCompileOptions.useAnt = false
//}

task createVersionFile(){
	println "createVersionFile"
	def inputFile = file("version.txt")
	
	def patternVersionNumber = Pattern.compile("(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)")
    def versionText = inputFile.getText()

    def matcherVersionNumber = patternVersionNumber.matcher(versionText)
    matcherVersionNumber.find()
    def majorVersion = Integer.parseInt(matcherVersionNumber.group(1))
    def minorVersion = Integer.parseInt(matcherVersionNumber.group(2))
    def subVersion = Integer.parseInt(matcherVersionNumber.group(3))
	def pointVersion = Integer.parseInt(matcherVersionNumber.group(4))
    version  = majorVersion + "." + minorVersion + "." + subVersion + "." + (pointVersion +1)
	
	println "Build: " + version
	
	def outputFile = file("src/main/resources/version.txt")
	if (!outputFile.isFile()) {
		outputFile.parentFile.mkdirs()
		outputFile.createNewFile()	
	}
	outputFile.write "$version"
	inputFile.write "$version"
}

task releaseVersionFile() << {
	println "releaseVersionFile"
	def inputFile = file("version.txt")
	
	def patternVersionNumber = Pattern.compile("(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)")
    def versionText = inputFile.getText()
	println  versionText
	
	
    def matcherVersionNumber = patternVersionNumber.matcher(versionText)
    matcherVersionNumber.find()
    def majorVersion = Integer.parseInt(matcherVersionNumber.group(1))
    def minorVersion = Integer.parseInt(matcherVersionNumber.group(2))
    def subVersion = Integer.parseInt(matcherVersionNumber.group(3))
	def pointVersion = Integer.parseInt(matcherVersionNumber.group(4))
	
	subVersion = subVersion +1
	
	if (subVersion > 9) {
		subVersion = 0
		minorVersion = minorVersion +1
	}
	if (minorVersion > 9) {
		minorVersion = 0
		majorVersion = majorVersion +1
	}
	
    version  = majorVersion + "." + minorVersion + "." + subVersion + "." + (pointVersion)
	
	println "Release: " + version
	
	def outputFile = file("src/main/resources/version.txt")
	if (!outputFile.isFile()) {
		outputFile.parentFile.mkdirs()
		outputFile.createNewFile()	
	}
	outputFile.write "$version"
	inputFile.write "$version"
}

task fatJar(type: Jar, dependsOn: ['clean','createVersionFile',":updater:fatJar", 'build']){

	manifest {
        attributes 'Main-Class': 'cova2.Main',
		'Implementation-Title': 'COVA 2',  
        'Implementation-Version': version
    }

	doFirst(){
		from file('version.txt')
		into project(':updater').file('version.txt')
		
		from file('src/main/resources/version.txt')
		into project(':updater').file('src/main/resources/version.txt')
	}
	
	doLast(){
		from files(sourceSets.main.output.classesDir)
		from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
		with jar
		
		archiveName = 'cova2.jar'
		destinationDir = file("${buildDir}/jars")
	}
}
fatJar.onlyIf{ dependsOnTaskDidWork() } 

task createZip(type:Zip,dependsOn:fatJar) << { 
	from file('build/jars')
	//include updater.jar in zip
	from file('updater/build/jars')
	baseName = 'cova2'
	destinationDir = file('dist')
}

task go(dependsOn:createZip) {
	doFirst {
		println "GO AQUARION!"
	}
	doLast{
		if(tasks.fatJar.didWork) {
			println "DONE!"
		} else {
			println "FAIL!"
		}
	}
	//deploy
}