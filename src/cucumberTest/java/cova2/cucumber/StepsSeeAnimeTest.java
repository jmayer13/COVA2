/**
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see <http://www.gnu.org/licenses/>.
 */
package cova2.cucumber;

import cova2.controller.MainController;
import cova2.dao.AnimeDAO;
import cova2.dao.IndexDAO;
import cova2.exception.UnavailableDataException;
import cova2.model.anime.Anime;
import cova2.model.index.Index;
import cucumber.api.java.After;
import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;
import java.io.File;
import java.sql.SQLException;
import java.util.List;
import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;
import static org.junit.Assert.assertTrue;

//!Code pregenerated by Cucumber
/**
 * Test to See Animes feature using Cucumber
 *
 * @author Jonas Mayer (jonas.mayer.developer@gmail.com)
 */
public class StepsSeeAnimeTest {

    private Index indexRegistered;

    private MainController mainController;

    /**
     * Assert "Given I have the anime "One Piece" registered, in the episode
     * 600"
     *
     * @param title String "One Piece"
     * @param currentEpisode Double 600
     * @throws Throwable
     * @throws SQLException
     * @throws ClassNotFoundException
     */
    @Given("^I have the anime \"(.*?)\" registered, in the episode (\\d+)$")
    public void i_have_the_anime_registered_in_the_episode(String title, double currentEpisode) throws Throwable, SQLException, ClassNotFoundException {
        IndexDAO indexDAO = new IndexDAO();
        Index index = new Index(title, indexDAO.getRecommendedCodeAnime());
        indexRegistered = indexDAO.addIndex(index);
        Anime anime = new Anime();
        anime.setCodeAnime(index.getCodeAnime());
        anime.setCurrentEpisode(currentEpisode);
        AnimeDAO animeDAO = new AnimeDAO();
        animeDAO.createAnime(anime);
    }//end of the method i_have_the_anime_registered_in_the_episode

    /**
     * Assert "I open the main window"
     *
     * @throws Throwable
     */
    @When("^I open the main window$")
    public void i_open_the_main_window() throws Throwable {
        mainController = new MainController();
        assertTrue(mainController.isViewOpen());
    }//end of the method i_open_the_main_window

    /**
     * Assert "I should see the anime "One Piece""
     *
     * @param animeName
     * @throws Throwable
     */
    @Then("^I should see the anime \"(.*?)\"$")
    public void i_should_see_the_anime(String animeName) throws Throwable {
        Index index = mainController.getIndexRow(0);
        assertThat(index.getMainTitleAnime(), is(animeName));
    }//end of the method i_should_see_the_anime

    /**
     * Assert "And the current episode 600 that I wached"
     *
     * @param currentEpisode 600
     * @throws Throwable
     */
    @Then("^the current episode (\\d+) that I wached$")
    public void the_current_episode_that_I_wached(double currentEpisode) throws Throwable {
        Anime anime = mainController.getAnimeRow(0);
        assertThat(anime.getCurrentEpisode(), is(currentEpisode));
    }//end of the method the_current_episode_that_I_wached

    /**
     * Clean data of test
     *
     * @throws SQLException
     * @throws ClassNotFoundException
     */
    @After
    public void cleanData() throws SQLException, ClassNotFoundException, UnavailableDataException {
        IndexDAO indexDAO = new IndexDAO();
        List<Index> indexes = indexDAO.getIndexes();
        for (Index index : indexes) {
            indexDAO.eraseIndex(index);
        }
        indexDAO.closeConnection();
        File dirDB = new File("data" + File.separator + "db");
        for (File file : dirDB.listFiles()) {
            file.delete();
        }
        dirDB.delete();
        File dirJSON = new File("data" + File.separator + "anime");
        if (dirJSON.exists()) {
            for (File file : dirJSON.listFiles()) {
                file.delete();
            }
        }
        dirJSON.delete();
    }//end of the method cleanData
}//end of the class StepsSeeAnimeTest
